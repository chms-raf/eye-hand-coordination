#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <math.h>
#include <stdio.h>

#include <glm/glm.hpp>
#include <glm/gtc/random.hpp>

#include <algorithm>
#include <iostream>
#include <list>
#include <numeric>
#include <random>
#include <vector>

// Window Dimensions
// Test window: 800 X 500
// Full screen Macbook: 1440 X 855
// Full screen samsung TV: 1920 X 1032
#define SCREEN_WIDTH 1440            // Test window with same ratio as full screen (800 X 500)
#define SCREEN_HEIGHT 655           // Test window with same ratio as full screen (800 X 500)


#define R 25       // radius of large circle
#define r 5       // radius of small circle

// Define global variables
float startPosX = SCREEN_WIDTH / 2;
float startPosY = SCREEN_HEIGHT * 0.2;
float X = startPosX;                 // X position of fixation target (start at center of screen)
float Y = startPosY;                // Y position of fixation target (start at center of screen)
int targetNum = 0;                          // Number of current target
int state = 0;                              // State of the program
int reach = 0;                              // Current reach number
float eyeX;
float eyeY;

// Declare functions
void mouseButtonCallback(GLFWwindow *window, int button, int action, int mods);
static void cursorPositionCallback(GLFWwindow *window, double xPos, double yPos);
void drawCursor(GLfloat x, GLfloat y, GLfloat z, GLfloat Radius, GLfloat radius);
void drawCircle( GLfloat x, GLfloat y, GLfloat z, GLfloat Radius, GLint numberOfSides );
void drawPlus( GLfloat x, GLfloat y, GLfloat z);
void processInput(GLFWwindow *window);
void changePos_Grid();
void changePos_Circular();
void changePos_Line();
void Send_UDP();

//-----------------------------------------------------------------------
//                              M A I N
//
// From here we start the application and run the game loop
//-----------------------------------------------------------------------
int main( void )
{
GLFWwindow *window;

// Initialize the library
if ( !glfwInit( ) )
{
return -1;
}

// Seed random number generator (means RNG will be different every time)
srand((int)time(NULL));
//changePos_Grid();        // Changes the value of global variable 'angleValue'

// Create a windowed mode window and its OpenGL context
window = glfwCreateWindow( SCREEN_WIDTH, SCREEN_HEIGHT, "Hello World", NULL, NULL );
glfwSetMouseButtonCallback(window, mouseButtonCallback);
glfwSetCursorPosCallback(window, cursorPositionCallback);
glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_NORMAL);

if ( !window )
{
glfwTerminate( );
return -1;
}

// Make the window's context current
glfwMakeContextCurrent( window );

glViewport( 0.0f, 0.0f, SCREEN_WIDTH, SCREEN_HEIGHT ); // specifies the part of the window to which OpenGL will draw (in pixels), convert from normalised to pixels

glMatrixMode( GL_PROJECTION ); // projection matrix defines the properties of the camera that views the objects in the world coordinate frame. Here you typically set the zoom factor, aspect ratio and the near and far clipping planes
glLoadIdentity( ); // replace the current matrix with the identity matrix and starts us a fresh because matrix transforms such as glOrpho and glRotate cumulate, basically puts us at (0, 0, 0)
glOrtho( 0, SCREEN_WIDTH, 0, SCREEN_HEIGHT, 0, 1 ); // essentially set coordinate system
glMatrixMode( GL_MODELVIEW ); // (default matrix mode) modelview matrix defines how your objects are transformed (meaning translation, rotation and scaling) in your world
glLoadIdentity( ); // same as above comment

// Loop until the user closes the window
while ( !glfwWindowShouldClose( window ) )
{

processInput( window );

glClear( GL_COLOR_BUFFER_BIT );

// render OpenGL here
// Draw fixation target
drawCircle( X, Y, 0, R, 10000 );
glColor3f(0.0f, 0.0f, 0.0f);    // change draw color to black
drawPlus(X, Y, 0);
glColor3f(1.0f, 1.0f, 1.0f);    // change draw color to white
drawCircle( X, Y, 0, r / 2.0, 10000 );
drawCursor(eyeX, eyeY, 0, SCREEN_WIDTH, 1);

// Swap front and back buffers
glfwSwapBuffers( window );

// Poll for and process events
glfwPollEvents( );

//Send UDP packet
//SendUDP();
}

glfwTerminate( );

return 0;
}

//-----------------------------------------------------------------------
//                              mouseButtonCallback
//
// This function processess the input from the mouse
//-----------------------------------------------------------------------
void mouseButtonCallback(GLFWwindow *window, int button, int action, int mods)
{
if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_RELEASE) {
if (state == 0) {
//changePos_Grid();
//changePos_Circular();
changePos_Line();
state = 1;
}

else if (state == 1) {
reach++;
//printf("Reach: %i, Target: %i, X: %f, Y: %f\n", reach, targetNum, X, Y);
X = startPosX;
Y = startPosY;
state = 0;
}
}
}

//-----------------------------------------------------------------------
//                              cursorPositionCallback
//
// This function processess the input from the mouse
//-----------------------------------------------------------------------
static void cursorPositionCallback( GLFWwindow *window, double xPos, double yPos)
{

//eyeX = (xPos-(SCREEN_WIDTH/2))/(SCREEN_WIDTH/2);
//eyeY = -(yPos-(SCREEN_HEIGHT/2))/(SCREEN_HEIGHT/2);
eyeX = xPos;
eyeY = -yPos + SCREEN_HEIGHT;
//printf("EyeX: %f, EyeY: %f\n", eyeX, eyeY);


}

//-----------------------------------------------------------------------
//                              drawCursor
//
// This function draws the cursor for visual feedback
//-----------------------------------------------------------------------
void drawCursor(GLfloat x, GLfloat y, GLfloat z, GLfloat Radius, GLfloat radius)
{
GLfloat plusVertices[] =
{
x - radius, y + radius, 0,
x - radius, y + Radius, 0,
x + radius, y + Radius, 0,
x + radius, y + radius, 0,

x + Radius, y + radius, 0,
x + Radius, y - radius, 0,
x + radius, y - radius, 0,

x + radius, y - Radius, 0,
x - radius, y - Radius, 0,
x - radius, y - radius, 0,

x - Radius, y - radius, 0,
x - Radius, y + radius, 0
};

glPolygonMode( GL_FRONT_AND_BACK, GL_FILL ); // polygon drawing mode (GL_POINT, GL_LINE, GL_FILL)

glEnableClientState( GL_VERTEX_ARRAY );
glVertexPointer( 3, GL_FLOAT, 0, plusVertices );
glDrawArrays( GL_POLYGON, 0, 12);
glDisableClientState( GL_VERTEX_ARRAY );
}

//-----------------------------------------------------------------------
//                              drawCircle
//
// This function draws a circle
//-----------------------------------------------------------------------
void drawCircle( GLfloat x, GLfloat y, GLfloat z, GLfloat Radius, GLint numberOfSides )
{
int numberOfVertices = numberOfSides + 2;

GLfloat twicePi = 2.0f * M_PI;

GLfloat circleVerticesX[numberOfVertices];
GLfloat circleVerticesY[numberOfVertices];
GLfloat circleVerticesZ[numberOfVertices];

circleVerticesX[0] = x;
circleVerticesY[0] = y;
circleVerticesZ[0] = z;

for ( int i = 1; i < numberOfVertices; i++ )
{
circleVerticesX[i] = x + ( Radius * cos( i *  twicePi / numberOfSides ) );
circleVerticesY[i] = y + ( Radius * sin( i * twicePi / numberOfSides ) );
circleVerticesZ[i] = z;
}

GLfloat allCircleVertices[( numberOfVertices ) * 3];

for ( int i = 0; i < numberOfVertices; i++ )
{
allCircleVertices[i * 3] = circleVerticesX[i];
allCircleVertices[( i * 3 ) + 1] = circleVerticesY[i];
allCircleVertices[( i * 3 ) + 2] = circleVerticesZ[i];
}

glEnableClientState( GL_VERTEX_ARRAY );
glVertexPointer( 3, GL_FLOAT, 0, allCircleVertices );
glDrawArrays( GL_TRIANGLE_FAN, 0, numberOfVertices);
glDisableClientState( GL_VERTEX_ARRAY );
}

//-----------------------------------------------------------------------
//                              drawPlus
//
// This function draws a plus
//-----------------------------------------------------------------------
void drawPlus(GLfloat x, GLfloat y, GLfloat z)
{
GLfloat plusVertices[] =
{
x - r, y + r, 0,
x - r, y + R, 0,
x + r, y + R, 0,
x + r, y + r, 0,

x + R, y + r, 0,
x + R, y - r, 0,
x + r, y - r, 0,

x + r, y - R, 0,
x - r, y - R, 0,
x - r, y - r, 0,

x - R, y - r, 0,
x - R, y + r, 0
};

glPolygonMode( GL_FRONT_AND_BACK, GL_FILL ); // polygon drawing mode (GL_POINT, GL_LINE, GL_FILL)

glEnableClientState( GL_VERTEX_ARRAY );
glVertexPointer( 3, GL_FLOAT, 0, plusVertices );
glDrawArrays( GL_POLYGON, 0, 12);
glDisableClientState( GL_VERTEX_ARRAY );
}

//-----------------------------------------------------------------------
//                              processInput
//
// This function will perform an action when a key is pressed
//-----------------------------------------------------------------------
void processInput(GLFWwindow *window)
{

if(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
{
glfwSetWindowShouldClose(window, true);
}

}

//-----------------------------------------------------------------------
//                              changePos_Grid
//
// This function changes the position of the fixation target in a grid
// pattern (Specified target positions)
//-----------------------------------------------------------------------
void changePos_Grid()
{
int i;
int ii;
float xpositions[9] = {0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9};
float ypositions[9] = {0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1};
int numPositions = sizeof(xpositions)/sizeof(xpositions[0]);
int numTargets = glm::pow(numPositions, 2);
float xPos[numPositions];
float yPos[numPositions];
for(i = 0; i < numPositions; i++) xPos[i] = xpositions[i] * SCREEN_WIDTH;
for(i = 0; i < numPositions; i++) yPos[i] = ypositions[i] * SCREEN_HEIGHT;
targetNum = glm::linearRand(1, numTargets);

for(ii = 1; ii <= numPositions; ii++) {
if (targetNum <= numPositions * ii && targetNum > numPositions * (ii - 1)) {
for (i = 0; i <= numPositions; i++) {
if ((targetNum + i) / (numPositions * ii) == 1) {
break;
}
}
break;
}
}
X = xPos[numPositions - (i + 1)];
Y = yPos[ii - 1];
}

//-----------------------------------------------------------------------
//                              changePos_Circular
//
// This function randomly changes the position of the fixation target
// in a circular pattern with specified radius (constant reach length)
//-----------------------------------------------------------------------
void changePos_Circular()
{
int radius;

if (SCREEN_WIDTH < SCREEN_HEIGHT)
{
radius = SCREEN_WIDTH / 2.0;
}
else
{
radius = SCREEN_HEIGHT / 2.0;
}

//glm::vec2 positionIn(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
//glm::vec2 positionOut(0,0);
glm::vec2 temp = glm::circularRand(radius * .9);

//printf("temp[0]: %f, temp[1]: %f\n", temp[0], temp[1]);

X = (SCREEN_WIDTH / 2) + temp[0];
Y = (SCREEN_HEIGHT / 2) + temp[1];
}

//-----------------------------------------------------------------------
//                              changePos_Line
//
// This function randomly changes the position of the fixation target
// in a line formation.
//-----------------------------------------------------------------------
void changePos_Line()
{
float targets [4][2] = {
{0.2 * SCREEN_WIDTH, startPosY},
{0.4 * SCREEN_WIDTH, startPosY},
{0.6 * SCREEN_WIDTH, startPosY},
{0.8 * SCREEN_WIDTH, startPosY}
};

int numTargets = sizeof(targets)/sizeof(targets[0]);
std::list<int> l(numTargets);
std::iota(l.begin(), l.end(), 1);

std::vector<std::list<int>::iterator> v(l.size());
std::iota(v.begin(), v.end(), l.begin());

std::shuffle(v.begin(), v.end(), std::mt19937{std::random_device{}()});

std::cout << "Contents of the list: ";
for(auto n: l) std::cout << n << ' ';
std::cout << '\n';

std::cout << "Contents of the list, shuffled: ";
for(auto i: v) std::cout << *i << ' ';
std::cout << '\n';


//int targetNum = glm::linearRand(1, numTargets);

//X = targets[targetNum - 1][0];
//Y = targets[targetNum - 1][1];
//printf("number of targets: %i\n", numTargets);
}

/*
//-----------------------------------------------------------------------
//                              Send_UDP
//
// This function sends relevant data to the client
//-----------------------------------------------------------------------
void Send_UDP()
{
int send_socket;
struct sockaddr_in dSPACEaddr;

// Create packet
udpData[0] = currentTime;
udpData[1] = targetNum;
udpData[2] = transformedLocationFinal[0];
udpData[3] = transformedLocationFinal[1];
udpData[4] = eyeX;
udpData[5] = eyeY;
udpData[6] = handX;
udpData[7] = handY;

// encode data into byte stream
std::vector<int> g1;
union{ double myDouble1; unsigned char myChars1[sizeof(double)]; };
myDouble1 = udpData[0];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g1.push_back((int)myChars1[k]);
//std::cout << (int)myChars1[k] << ' ';
}

std::vector<int> g2;
union{ double myDouble2; unsigned char myChars2[sizeof(double)]; };
myDouble2 = udpData[1];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g2.push_back((int)myChars2[k]);
}

std::vector<int> g3;
union{ double myDouble3; unsigned char myChars3[sizeof(double)]; };
myDouble3 = udpData[2];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g3.push_back((int)myChars3[k]);
}

std::vector<int> g4;
union{ double myDouble4; unsigned char myChars4[sizeof(double)]; };
myDouble4 = udpData[3];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g4.push_back((int)myChars4[k]);
}

std::vector<int> g5;
union{ double myDouble5; unsigned char myChars5[sizeof(double)]; };
myDouble5 = udpData[4];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g5.push_back((int)myChars5[k]);
}

std::vector<int> g6;
union{ double myDouble6; unsigned char myChars6[sizeof(double)]; };
myDouble6 = udpData[5];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g6.push_back((int)myChars6[k]);
}

std::vector<int> g7;
union{ double myDouble7; unsigned char myChars7[sizeof(double)]; };
myDouble7 = udpData[6];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g7.push_back((int)myChars7[k]);
}

std::vector<int> g8;
union{ double myDouble8; unsigned char myChars8[sizeof(double)]; };
myDouble8 = udpData[7];
for( int k = sizeof(double)-1; k >= 0; k-- )
{
g8.push_back((int)myChars8[k]);
}

// Concatenate byte stream vectors into a single vector
std::vector<int> results;
results.reserve(g1.size() + g2.size() + g3.size() + g4.size() + g5.size() + g6.size() + g7.size() + g8.size());
results.insert(results.end(), g1.begin(), g1.end());
results.insert(results.end(), g2.begin(), g2.end());
results.insert(results.end(), g3.begin(), g3.end());
results.insert(results.end(), g4.begin(), g4.end());
results.insert(results.end(), g5.begin(), g5.end());
results.insert(results.end(), g6.begin(), g6.end());
results.insert(results.end(), g7.begin(), g7.end());
results.insert(results.end(), g8.begin(), g8.end());

// Send Packet
uint8_t buf_send[BUFLEN];
for (int c = 0; c < BUFLEN; c++) {
buf_send[c] = results[c];
}

// Creating socket file descriptor
if ( (send_socket = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
perror("socket creation failed");
exit(EXIT_FAILURE);
}

memset(&dSPACEaddr, 0, sizeof(dSPACEaddr));

// Filling server information
dSPACEaddr.sin_family = AF_INET; // IPv4
dSPACEaddr.sin_port = htons(DSPACE_PORT);
//dSPACEaddr.sin_addr.s_addr = INADDR_ANY;       // Doesn't seem to work
dSPACEaddr.sin_addr.s_addr = inet_addr(DSPACE_IP);  //dSPACE

sendto(send_socket, buf_send, BUFLEN,
0, (const struct sockaddr *) &dSPACEaddr,
sizeof(dSPACEaddr));

close(send_socket);
}
*/
